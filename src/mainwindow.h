#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QWidget>
#include <QSerialPort>
#include <QSerialPortInfo>
#include <QCheckBox>
#include <QVBoxLayout>
#include <QTimer>
#include "serial.h"
#include <QMessageBox>
#include <QFileDialog>
#include <QFile>
#include <QIcon>
#include <QHBoxLayout>

QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

/**
 * @brief Structure to hold serial port parameters.
 *
 * This structure contains various parameters required to configure a serial port connection.
 */
struct SerialPortParameters {
    QString portName;                        /**< The name of the serial port. */
    int baudRate;                            /**< The baud rate for the serial communication. */
    QSerialPort::DataBits dataBits;          /**< The number of data bits in each frame. */
    QSerialPort::Parity parity;              /**< The parity setting for the serial communication. */
    QSerialPort::StopBits stopBits;          /**< The number of stop bits in each frame. */
    QSerialPort::FlowControl flowControl;    /**< The flow control setting for the serial communication. */
    int vendorId;                            /**< The vendor ID of the serial device. */
    int productId;                           /**< The product ID of the serial device. */
};

/**
 * @class MainWindow
 * @brief The main window class for the application.
 *
 * This class represents the main window of the application, providing UI components
 * and functionalities to interact with serial devices.
 */
class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    /**
     * @brief Constructor for MainWindow.
     * @param parent The parent widget.
     */
    MainWindow(QWidget *parent = nullptr);

    /**
     * @brief Destructor for MainWindow.
     */
    ~MainWindow();

    /**
     * @brief Structure to represent a protocol message.
     */
    struct ProtocolMessage
    {
        uint16_t machineId;           /**< ID of the machine. */
        uint16_t customId;            /**< Custom ID of the device. */
        uint32_t messageSeqNum;       /**< Sequence number of the message. */
        uint16_t messagePacketId;     /**< ID of the message packet. */
        uint16_t commandType;         /**< Type of command. */
        uint8_t serviceCommandType;   /**< Type of service command. */
        uint16_t dataLength;          /**< Length of the data. */
        QByteArray data;              /**< Data being sent. */
        uint32_t crc;                 /**< CRC for error checking. */
    };

public slots:
    /**
     * @brief Slot to handle error messages.
     * @param error The error message to handle.
     */
    void errorHandler(QString error);

private slots:
    /**
     * @brief Slot to handle received messages.
     */
    void receiveMessage();

    /**
     * @brief Slot to update the baud rate.
     */
    void updateBaudRate();

    /**
     * @brief Slot to handle the clear button click event.
     */
    void on_pushButton_Clear_clicked();

    /**
     * @brief Slot to handle the refresh button click event.
     */
    void on_pushButton_Refresh_clicked();

    /**
     * @brief Slot to handle the send button click event.
     */
    void on_pushButton_Send_clicked();

    /**
     * @brief Slot to handle the refresh button click event.
     */
    void on_pushButton_Rferesh_clicked();

    /**
     * @brief Slot to handle the connect button toggle event.
     * @param checked The state of the connect button.
     */
    void on_pushButton_Connect_toggled(bool checked);

    /**
     * @brief Slot to handle the import button click event.
     */
    void on_pushButton_import_clicked();

    /**
     * @brief Slot to handle the export button click event.
     */
    void on_pushButton_export_clicked();

    /**
     * @brief Slot to handle the read file button click event.
     */
    void on_pushButton_ReadFile_clicked();

    /**
     * @brief Slot to handle the update file button click event.
     */
    void on_pushButton_UpdateFile_clicked();

    /**
     * @brief Slot to check the device status periodically.
     */
    void checkDeviceStatus();

    /**
     * @brief Slot to handle the enlarge button click event.
     */
    void on_pushButton_enlarge_clicked();

private:
    Ui::MainWindow *ui;                          /**< UI elements generated by Qt Designer. */
    QString buffer;                              /**< Buffer to store received data. */
    QString code;                                /**< Code data. */
    int codeSize;                                /**< Size of the code data. */
    QCheckBox *controlZCheckBox;                 /**< CheckBox for Control-Z option. */
    QVBoxLayout *mainLayout;                     /**< Main layout for the window. */
    QTimer *timer;                               /**< Timer for periodic tasks. */
    Serial &serial;                              /**< Reference to the Serial object. */
    QCheckBox *checkbox_r_n;                     /**< CheckBox for CR+LF option. */
    QCheckBox *checkBox_Recived;                 /**< CheckBox to indicate received data. */
    QByteArray fileData;                         /**< Data from a file. */
    QStringList currentPortNames;                /**< List of current serial port names. */
    QCheckBox *checkBox_Crc;                     /**< CheckBox for CRC option. */
    QCheckBox *checkBox_protocol;                /**< CheckBox for protocol option. */

    SerialPortParameters currentParams;          /**< Parameters of the current serial port connection. */
    SerialPortParameters lastConnectedParams;    /**< Parameters of the last connected serial port. */
    bool isConnected;                            /**< Flag to indicate connection status. */

    bool reconnectMessageBoxShown = false;       /**< Flag to indicate if the reconnect message box has been shown. */
    bool devicePreviouslyConnected = false;      /**< Flag to indicate if the device was previously connected. */

    bool isEnlarged;                             /**< Flag to indicate if the window is enlarged. */
    int originalWidth;                           /**< Original width of the window. */
    int enlargedWidth;                           /**< Enlarged width of the window. */

    /**
     * @brief Connect to a serial device with the given parameters.
     * @param params The serial port parameters.
     */
    void connectToDevice(const SerialPortParameters &params);

    /**
     * @brief Reconnect to the serial device.
     */
    void reconnectDevice();

    /**
     * @brief Check if the given parameters match the current device.
     * @param params The serial port parameters to check.
     * @return True if the parameters match, false otherwise.
     */
    bool isSameDevice(const SerialPortParameters &params);

    /**
     * @brief Show a message box to indicate reconnection.
     */
    void showReconnectMessageBox();
};

#endif // MAINWINDOW_H
